{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACO;AACP,sBAAsB,YAAY;AAClC,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACZA;AACO;AACP;AACA;;AAEA,sBAAsB,YAAY;AAClC,0BAA0B,YAAY;AACtC;AACA;AACA,6BAA6B,QAAQ;AACrC,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UC7CA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNkD;AACA;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,EAAE,+DAAU;AACZ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,+DAAU;AACnB,EAAE,+DAAU;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,+DAAU","sources":["webpack://ex01/./ex05/indexRenderGrid.js","webpack://ex01/./ex05/indexUpdateGrid.js","webpack://ex01/webpack/bootstrap","webpack://ex01/webpack/runtime/define property getters","webpack://ex01/webpack/runtime/hasOwnProperty shorthand","webpack://ex01/webpack/runtime/make namespace object","webpack://ex01/./ex05/index.js"],"sourcesContent":["// grid を canvas に描画する\nexport function renderGrid(grid, ROWS, COLS, RESOLUTION, ctx) {\n    for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n            const cell = grid[row][col];\n            ctx.beginPath();\n            ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION);\n            ctx.fillStyle = cell ? \"black\" : \"white\";\n            ctx.fill();\n            ctx.stroke();\n        }\n    }\n}","// Life Game のルールに従ってセルを更新する\nexport function updateGrid(grid, ROWS, COLS) {\n    // 新しいグリッドを作成\n    const nextGrid = grid.map((arr) => [...arr]);\n\n    for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n            // 周囲のセルの生存数を数えて nextGrid[row][col] に true or false を設定する (実装してね)\n            let count = 0;\n            for (let i = -1; i <= 1; i++) {\n                for (let j = -1; j <= 1; j++) {\n                    // 自分自身はカウントしない\n                    if (i === 0 && j === 0) {\n                        continue;\n                    }\n                    let newRow = row + i;\n                    let newCol = col + j;\n                    // 範囲外の場合はスキップ\n                    if (newRow < 0 || ROWS <= newRow || newCol < 0 || COLS <= newCol) {\n                        continue;\n                    }\n                    if (grid[newRow][newCol]) {\n                        count++;\n                    }\n                }\n            }\n            //誕生\n            if (!grid[row][col] && count === 3) {\n                nextGrid[row][col] = true;\n            }\n            //生存\n            else if (grid[row][col] && (count === 2 || count === 3)) {\n                nextGrid[row][col] = true;\n            }\n            //過疎\n            else if (grid[row][col] && count <= 1) {\n                nextGrid[row][col] = false;\n            }\n            //過密  \n            else if (grid[row][col] && count >= 4) {\n                nextGrid[row][col] = false;\n            }\n        }\n    }\n    return nextGrid;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { updateGrid } from \"./indexUpdateGrid.js\";\r\nimport { renderGrid } from \"./indexRenderGrid.js\";\r\n\r\n\r\n// 50 x 50 の盤面とする\r\nconst ROWS = 50;\r\nconst COLS = 50;\r\n// 1セルのサイズ\r\nconst RESOLUTION = 10;\r\n\r\nconst canvas = document.querySelector(\"#screen\");\r\nconst ctx = canvas.getContext(\"2d\");\r\nconst startButton = document.querySelector(\"#start\");\r\nconst pauseButton = document.querySelector(\"#pause\");\r\n\r\ncanvas.width = ROWS * RESOLUTION;\r\ncanvas.height = COLS * RESOLUTION;\r\n\r\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame が返す ID\r\nlet animationId = null;\r\n\r\n// NOTE: download from https://soundeffect-lab.info/sound/button/mp3/decision1.mp3\r\nconst sound = new Audio(\"/ch15.04-10/ex10/decision1.mp3\");\r\n\r\n// ライフゲームのセル (true or false) をランダムに初期化する\r\nlet grid = new Array(ROWS)\r\n  .fill(null)\r\n  .map(() =>\r\n    new Array(COLS).fill(null).map(() => !!Math.floor(Math.random() * 2))\r\n  );\r\n\r\n// canvas がクリックされたときの処理 (セルの値を反転する)\r\ncanvas.addEventListener(\"click\", function (evt) {\r\n  const rect = canvas.getBoundingClientRect();\r\n  const pos = { x: evt.clientX - rect.left, y: evt.clientY - rect.top };\r\n\r\n  const row = Math.floor(pos.y / RESOLUTION);\r\n  const col = Math.floor(pos.x / RESOLUTION);\r\n  grid[row][col] = !grid[row][col];\r\n  sound.cloneNode().play();\r\n  renderGrid(grid, ROWS, COLS, RESOLUTION, ctx);\r\n});\r\n\r\n// requestAnimationFrame によって一定間隔で更新・描画を行う\r\n// NOTE: リフレッシュレートの高い画面では速く実行される (これを防ぐ場合は下記の例を参照)\r\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame\r\nfunction update() {\r\n  grid = updateGrid(grid, ROWS, COLS);\r\n  renderGrid(grid, ROWS, COLS, RESOLUTION, ctx);\r\n  animationId = requestAnimationFrame(update);\r\n}\r\n\r\nstartButton.addEventListener(\"click\", () => {\r\n  // 既にアニメーションが動いている場合は何もしない\r\n  if (animationId) {\r\n    return;\r\n  }\r\n  update();\r\n});\r\n\r\npauseButton.addEventListener(\"click\", () => {\r\n  // アニメーションが停止している場合は何もしない\r\n  if (!animationId) {\r\n    return;\r\n  }\r\n  cancelAnimationFrame(animationId);\r\n  animationId = null;\r\n});\r\n\r\nrenderGrid(grid, ROWS, COLS, RESOLUTION, ctx);\r\n"],"names":[],"sourceRoot":""}