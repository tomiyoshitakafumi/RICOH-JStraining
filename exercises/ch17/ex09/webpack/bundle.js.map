{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA,cAAc;AACd,cAAc;AACd;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;UC3EA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACFmB;AACnB;AACA,gBAAgB;AAChB,gBAAgB;AAChB;AACA,wBAAwB,iDAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,iCAAiC,6CAAG,CAAC,0DAAoB","sources":["webpack://ex01/./ex09/dist/task.js","webpack://ex01/webpack/bootstrap","webpack://ex01/webpack/runtime/define property getters","webpack://ex01/webpack/runtime/hasOwnProperty shorthand","webpack://ex01/webpack/runtime/make namespace object","webpack://ex01/./ex09/dist/caller.js"],"sourcesContent":["// 以下の型を定義すること\r\n//  - User: { id: number, name: string }\r\n//  - Task: { title: string, completed: boolean, user: User }\r\n//  - Priority: \"low\"|\"middle\"|\"high\"のいずれかの値をとる\r\n//  - PriorityTask: Taskかつ{ priority: Priority }を持つ型\r\n\r\n//check\r\n//       \r\n                \r\n             \r\n               \r\n \r\n\r\n                \r\n                \r\n                     \r\n             \r\n \r\n\r\n                                          \r\n\r\n                                                         \r\n\r\n\r\n// Userオブジェクトであることを判定する\r\nfunction isUserObject(obj     )          {\r\n  return (\r\n    typeof obj === \"object\" &&\r\n    typeof obj[\"id\"] === \"number\" &&\r\n    typeof obj[\"name\"] === \"string\"\r\n  );\r\n}\r\n\r\nexport class TaskManager          {\r\n  _tasks      = [];\r\n\r\n  // タスクを追加する\r\n  add(task   ) {\r\n    this._tasks.push(task);\r\n  }\r\n\r\n  // タスクを完了にする\r\n  // Userオブジェクトを指定した場合はそのUserのタスクを全て完了にする\r\n  // 文字列を指定した場合は、そのタイトルのタスクを全て完了にする\r\n  completeTask(target               ) {\r\n    if (isUserObject(target)) {\r\n      this._tasks\r\n        .filter((t) => t.user === target)\r\n        .forEach((t) => (t.completed = true));\r\n    } else {\r\n      this._tasks\r\n        .filter((t) => t.title === target)\r\n        .forEach((t) => (t.completed = true));\r\n    }\r\n  }\r\n\r\n  // 引数の関数にマッチするタスクを返す\r\n  // 引数を省略した場合はすべてのタスクを返す\r\n  getTasks(predicate                       )      {\r\n    if (predicate === undefined) {\r\n      return this._tasks;\r\n    } else {\r\n      return this._tasks.filter(predicate);\r\n    }\r\n  }\r\n}\r\n\r\n// priority=\"low\"または完了済のタスクを判定する\r\nexport function isLowOrCompletedTask(priorityTask              )          {\r\n  return priorityTask.priority === \"low\" || priorityTask.completed;\r\n}\r\n\r\n// 判定関数の否定結果を返す関数を生成する\r\nexport function not(f                                )                                 {\r\n  return (arg) => !f(arg);\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\r\n  TaskManager,\r\n  isLowOrCompletedTask,\r\n  not,\r\n} from \"./task.js\";\r\n\r\nconst user1 = { id: 1, name: \"Alice\" };\r\nconst user2 = { id: 2, name: \"Bob\" };\r\n\r\nconst taskManager = new TaskManager();\r\n\r\ntaskManager.add({\r\n  title: \"テキストを読む\",\r\n  completed: false,\r\n  user: user1,\r\n  priority: \"high\",\r\n});\r\n\r\ntaskManager.add({\r\n  title: \"質問表を書く\",\r\n  completed: false,\r\n  user: user1,\r\n  priority: \"middle\",\r\n});\r\n\r\ntaskManager.add({\r\n  title: \"質問表を確認する\",\r\n  completed: false,\r\n  user: user2,\r\n  priority: \"low\",\r\n});\r\n\r\ntaskManager.add({\r\n  title: \"問題を作成する\",\r\n  completed: false,\r\n  user: user2,\r\n  priority: \"middle\",\r\n});\r\n\r\ntaskManager.completeTask(user1);\r\ntaskManager.completeTask(\"質問表を確認する\");\r\n\r\nconsole.log(taskManager.getTasks());\r\nconsole.log(taskManager.getTasks(not(isLowOrCompletedTask)));\r\n"],"names":[],"sourceRoot":""}