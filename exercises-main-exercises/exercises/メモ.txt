JSインタプリンタ
(コンパイルしない)
アサーション　条件の結果のチェック
JSはホスト環境(webブラウザ)で動くしかし新しいかんきょうで　動くようにnodeとかで

p9のthisは呼び出されたベースオブジェクトを参照するのでthis.xやthis[0]もできる

a.x でxのプロパティが無くても作れる(エラーにならない

console.logの挙動を初めて知る

testコマンドって要はscriptsに書けばいいって事？
jestでECMAScript化で手こずった

ch01/ex05 メモ化して効率化せなアカンのいやらしい 

p21 unicodeがπとか文字集合その表記(エンコード)がUTF-16とかの文字コード。ASCII文字(エスケープシーケンス)もあるがいちおうこれが基本
しかしASCIIは古く文字が少ない→shiftが開発→ならUnicodeで統一しよう 

uft-16はASCIIと互換性がない。そのためASCIIとの互換性&Unicodeからエンコードで来ている。ため8がよい
https://wa3.i-3-i.info/diff746moji.html
文字→unicode文字集合→unicodeエンコード でパソコンが認識しやすいもの ASCIIとか保存形式
しかし非ASCIIとかだとUnicodeで同じ文字を複数の方法で記載できる。?
ということはUTF-16は危ない?

a =1;
b= 2;
と
a= 1
b=2
は同じセミコロンを改行としてもよしだが改行をセミコロンとできない場合は文末としてカウントしない
> できるだけセミコロンを省略するという記述方法を採用している人もいます。
> 念のためにセミコロンを記述する人もいます。
やばい

p26
オブジェクト指向
とは、簡単に言えば、グローバルに定義された関数を使ってさまざまな型の値を処理するのでは
なく、その型で定義されたメソッドを使って値を処理するような考え方です。


p32 BigIntはタイミング攻撃に耐性が無い

==は暗黙の型変換が走る


3.6で結構時間食った


NaNは値が不正数値に変換できなかったり割り算ミス 　nullは空　undefinedは定義されていない　let a をするとundefinedとなるため　undefinedはシステムレベルで予期せぬ動作　nullはプログラムレベルでの

不変とはtoUpperCase()とか値で比較するから 数値とか

そのためオブジェクトは===等しいとできない 可変と言われる(参照型ともいわれる)

3.7　一種の攻撃みたいでおもろい

Number()型変換関数はグローバル関数なのか

オブジェクトにプロパティと[]でアクセスする違い


Q.1 コーディングスタイルをチェックしたりOSSとか見てみるのがよい
今回はそこまで厳しくチェックする必要がない

JSは再帰は使わないほうがよい。最適化してくれないから。(言語によってはしてくれる)

unicode文字コードは正しい　utf-8は符号化方式という。　shitf-jif とutf-8は文字コードと符号化形式が違う

BigIntはいつ使う？　SQLのidのkey

拡張したいためにsymbol関数を使っている

esmodule は強制strictmode commonjsなら強制ではない

絵文字の比較で思ったんですけど　同じ絵文字というのは同じunicode文字コードということ？
javascriptのコードポイント比較される　utf-16